import React, {useState} from 'react'
import { useNavigate } from 'react-router-dom'

import { preview } from '../assets'
import { getRandomPrompt} from '../utils'
import { FormField, Loader } from '../components'


// Definiendo el functional component Create Post, con un objeto vacío. 
// Usamos useNavigate para poder navegar programáticamente (entre links)
// useState para almacenar los valores del formulario name, prompt y photo
const CreatePost = () => {
    const navigate = useNavigate()
    const [form, setForm] = useState({
        name: '', 
        prompt: '',
        photo: ''
    })

    // Generar imagen useState para saber si estamos generando en este momento la imagen, lo seteamos en automático en falso para que cuando demos click sea verdadero. 
    // Al igual que el loading, para controlar si se está cargando la publicación en ese momento.
    const [generatingImg, setGeneratingImg] = useState(false)
    const [loading, setLoading] = useState(false)

    // Función generateImage: 
    // Esta función se encarga de generar una imagen utilizando el API externa de OpenAI en función del prompt proporcionado en el formulario.
    // Si el prompt en el formulario no está vacío, realiza una solicitud POST a una URL usando fetch.
    // Si la solicitud tiene éxito, actualiza el estado form con la imagen generada.
    // Si ocurre algún error, muestra una alerta.
    // Finalmente, restablece el estado generatingImg
    const generateImage = async () => {
        if(form.prompt) {
            try {
                setGeneratingImg(true)
                const response = await fetch('https://image-generator-5s68.onrender.com/api/v1/dalle', {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json',
                    },
                    body: JSON.stringify({ prompt: form.prompt })
                })

                const data = await response.json()
                setForm({...form, photo: `data:image/jpeg;base64,${data.photo}`})
            } catch (error) {
                alert(error)
            } finally {
                setGeneratingImg(false)
            }
        } else {
            alert('Please enter a prompt')
        }
    }

    // Función handleSubmit: 
    // Si tanto el prompt como la imagen están presentes en el formulario, realiza una solicitud POST para compartir la publicación.
    // Si la solicitud tiene éxito, navega de regreso a la página de inicio.
    // Si ocurre algún error, muestra una alerta.
    // Finalmente, restablece el estado loading.
    const handleSubmit = async (e) => {
        e.preventDefault()

        if(form.prompt && form.photo) {
            setLoading(true)

          try {
                const response = await fetch('https://image-generator-5s68.onrender.com/api/v1/post',
                {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json', 
                    },
                    body: JSON.stringify(form)
                })
                await response.json()
                navigate('/')
            } catch (err) {
                alert(err) 
            } finally {
                setLoading(false)
            }
        } else {
            alert('Please enter a prompt and generate an image')
        }
    }

    // Actualiza el estado form cuando los valores de los campos del formulario cambian.
    const handleChange = (e) => {
        setForm({ ...form, [e.target.name]: e.target.value})
    }

    // Utiliza la función getRandomPrompt para obtener un prompt aleatorio basado en el prompt actual en el formulario.
    const handleSurpriseMe = () => {
        const randomPrompt = getRandomPrompt(form.prompt)
        setForm({ ...form, prompt: randomPrompt})
    }
    
// Renderiza una sección que contiene el contenido del formulario.
// Incluye campos para el nombre, el prompt y la imagen.
// Muestra una vista previa de la imagen generada o una imagen de vista previa estática si aún no se ha generado una imagen.
// Muestra botones para generar una imagen y para compartir la publicación.
// Utiliza estados (generatingImg y loading) para mostrar mensajes dinámicos en los botones.
  return (
    <section className='mx-auto max-w-7xl'>
         <div>
            <h1 className='font-extrabold text-[#222328] text-[32px]'>Create</h1>
            <p className='mt-2 text-[#666e75] text-[16px] max-w[500px]'>Create imaginative and visually stunning images generated by AI and share them with the community</p>
        </div>
        <form className='max-w-3xl mt-16' onSubmit={handleSubmit}>
            <div className='flex flex-col gap-5'>
                <FormField 
                labelName='Your name'
                type='text'
                name='name'
                placeholder= 'Jhon Doe'
                value={form.name}
                handleChange={handleChange} 
                />
                 <FormField 
                labelName='Prompt'
                type='text'
                name='prompt'
                placeholder= 'An armchair in the shape of an avocado'
                value={form.prompt}
                handleChange={handleChange} 
                isSurpriseMe
                handleSurpriseMe={handleSurpriseMe}
                />

                <div className='relative flex items-center justify-center w-64 h-64 p-3 text-sm text-gray-900 border border-gray-300 rounded-lg bg-gray-50 focus:ring-blue-500 focus:border-blue-500'>
                    {form.photo ? (
                        <img 
                        src={form.photo} 
                        alt={form.prompt} 
                        className='object-contain w-full h-full'/>
                    ) : (
                        <img 
                        src={preview} 
                        alt='preview'
                        className='object-contain w-9/12 h-9/12 opacity-40' />
                    )}

                    {generatingImg && (
                        <div className='absolute inset-0 z-0 flex justify-center items-center bg-[rgba(0,0,0,0.5] rounded-lg'>
                            <Loader/>
                        </div>
                    )}
                </div>
            </div>
            <div className='flex gap-5 mt-5'>
                <button
                type='button'
                onClick={generateImage}
                className='text-white bg-green-700 font-medium rounded-md text-sm w-full sm:w-auto px-5 py-2.5 text-center'>
                    {generatingImg ? 'Generating...' : 'Generate'}

                </button>
            </div>
            <div className='mt-10'>
                <p className='mt-2 text-[#666e75] text-[14px]'>Once you have created the image you want, you can share it with others in the community</p>
                <button
                type='submit'
                className='mt-3 text-white bg-[#6469ff] font-medium rounded-md text-sm w-full sm:w-auto px-5 py-2.5 text-center'
                >
                    {loading ? 'Sharing...' : 'Share with the community'}
                </button>
            </div>
        </form>
    </section>
  )
}

export default CreatePost;
